nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create a new graph object.
graph = graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
graph = add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id = count_per_location_sorted$ID[i]
location = count_per_location_sorted$Location[i]
count = count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index = which(unique_locations$Location == location)
to_index = which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph = add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Get the unique individual IDs.
individual_ids <- unique(identified_individuals$ID)
# Generate random colors for each individual using the rainbow() function.
num_unique_individuals <- length(individual_ids)
individual_colors <- rainbow(num_unique_individuals)
# Create a named vector mapping individual IDs to their corresponding colors.
individual_color_mapping <- setNames(individual_colors, individual_ids)
# Assign colors to vertices based on their individual ID.
V(graph)$vertex.color <- individual_color_mapping[V(graph)$name]
# Plot the graph with individual colors.
plot(graph, vertex.label = V(graph)$name, edge.label = E(graph)$weight, vertex.color = V(graph)$vertex.color)
# Create a new graph object.
graph = graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
# Count the number of unique locations, IDs, times, and dates.
num_unique_locations = identified_individuals %>%
distinct(Location) %>%
nrow()
num_unique_ids = identified_individuals %>%
distinct(ID) %>%
nrow()
num_unique_times = identified_individuals %>%
distinct(Time) %>%
nrow()
num_unique_dates = identified_individuals %>%
distinct(Date) %>%
nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create a new graph object.
graph = graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
graph = add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id = count_per_location_sorted$ID[i]
location = count_per_location_sorted$Location[i]
count = count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index = which(unique_locations$Location == location)
to_index = which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph = add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Get the unique individual IDs.
individual_ids <- unique(identified_individuals$ID)
# Generate random colors for each individual using the rainbow() function.
num_unique_individuals <- length(individual_ids)
individual_colors <- rainbow(num_unique_individuals)
# Create a named vector mapping individual IDs to their corresponding colors.
individual_color_mapping <- setNames(individual_colors, individual_ids)
# Assign colors to vertices based on their individual ID.
V(graph)$vertex.color <- individual_color_mapping[V(graph)$name]
# Plot the graph with individual colors.
plot(graph, vertex.label = V(graph)$name, edge.label = E(graph)$weight, vertex.color = V(graph)$vertex.color)
# Plot the graph.
plot(graph,
vertex.label = V(graph)$name,
edge.label = E(graph)$ID)
weight
# Plot the graph.
plot(graph,
vertex.label = V(graph)$name,
edge.label = E(graph)$weight)
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
# Count the number of unique locations, IDs, times, and dates.
num_unique_locations = identified_individuals %>%
distinct(Location) %>%
nrow()
num_unique_ids = identified_individuals %>%
distinct(ID) %>%
nrow()
num_unique_times = identified_individuals %>%
distinct(Time) %>%
nrow()
num_unique_dates = identified_individuals %>%
distinct(Date) %>%
nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create a new graph object.
graph <- graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations <- identified_individuals %>%
distinct(Location)
graph <- add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id <- count_per_location_sorted$ID[i]
location <- count_per_location_sorted$Location[i]
count <- count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index <- which(unique_locations$Location == location)
to_index <- which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph <- add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Get the unique individual IDs.
individual_ids <- unique(identified_individuals$ID)
# Create a discrete color palette with enough colors to represent each individual uniquely.
num_unique_individuals <- length(individual_ids)
color_palette <- brewer.pal(num_unique_individuals, "Set1")
# Create a named vector mapping individual IDs to their corresponding colors.
individual_color_mapping <- setNames(color_palette, individual_ids)
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
# Count the number of unique locations, IDs, times, and dates.
num_unique_locations = identified_individuals %>%
distinct(Location) %>%
nrow()
num_unique_ids = identified_individuals %>%
distinct(ID) %>%
nrow()
num_unique_times = identified_individuals %>%
distinct(Time) %>%
nrow()
num_unique_dates = identified_individuals %>%
distinct(Date) %>%
nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create a new graph object.
graph <- graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
graph = add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id <- count_per_location_sorted$ID[i]
location <- count_per_location_sorted$Location[i]
count <- count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index <- which(unique_locations$Location == location)
to_index <- which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph <- add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Get the unique individual IDs.
individual_ids = unique(identified_individuals$ID)
# Plot the graph.
l = layout_with_gem(graph)
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 3,
vertex.color="orange",
edge.color="#21918c")
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 5,
vertex.color="orange",
edge.color="#21918c")
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 9,
vertex.color="orange",
edge.color="#21918c")
# Plot the graph.
l = layout_with_gem(graph)
par(mar=c(1,1,1,1))
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 9,
vertex.color="orange",
edge.color="#21918c")
plot(degree(graph), betweenness(graph), pch = 19)
# Create a new graph object.
graph = graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
graph = add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id <- count_per_location_sorted$ID[i]
location <- count_per_location_sorted$Location[i]
count <- count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index <- which(unique_locations$Location == location)
to_index <- which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph <- add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Plot the graph.
l = layout_with_gem(graph)
par(mar=c(1,1,1,1))
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 9,
vertex.color="orange",
edge.color="#21918c")
plot(degree(graph), betweenness(graph), pch = 19)
View(graph)
graph[[1]]
# Plot the graph.
l = layout_with_gem(graph)
par(mar=c(1,1,1,1))
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 9,
vertex.color="orange",
edge.color="#21918c")
# Create an occurrence graph
occurrence_graph <- graph_from_data_frame(count_per_location_sorted, directed = FALSE)
# Set vertex attributes (ID counts) for visualization purposes
V(occurrence_graph)$count <- count_ID$Count[match(V(occurrence_graph)$name, count_ID$ID)]
# Plot the occurrence network
plot(occurrence_graph, vertex.size = V(occurrence_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(occurrence_graph)$Count/2, edge.arrow.size = 0.5,
main = "Occurrence Network", layout = layout.circle)
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
# Count the number of unique locations, IDs, times, and dates.
num_unique_locations = identified_individuals %>%
distinct(Location) %>%
nrow()
num_unique_ids = identified_individuals %>%
distinct(ID) %>%
nrow()
num_unique_times = identified_individuals %>%
distinct(Time) %>%
nrow()
num_unique_dates = identified_individuals %>%
distinct(Date) %>%
nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create an occurrence graph
occurrence_graph <- graph_from_data_frame(count_per_location_sorted, directed = FALSE)
# Set vertex attributes (ID counts) for visualization purposes
V(occurrence_graph)$count <- count_ID$Count[match(V(occurrence_graph)$name, count_ID$ID)]
# Plot the occurrence network
plot(occurrence_graph, vertex.size = V(occurrence_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(occurrence_graph)$Count/2, edge.arrow.size = 0.5,
main = "Occurrence Network", layout = layout.circle)
# Use Fruchterman-Reingold layout algorithm for better visualization
layout_occurrence <- layout_with_fr(occurrence_graph)
# Plot the occurrence network
plot(occurrence_graph, layout = layout_occurrence,
vertex.size = V(occurrence_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(occurrence_graph)$Count/2, edge.arrow.size = 0.5,
main = "Occurrence Network")
# Create an occurrence graph
# For occurrence network
occurrence_graph <- graph_from_data_frame(count_per_location_sorted, directed = FALSE)
V(occurrence_graph)$count <- count_ID$Count[match(V(occurrence_graph)$name, count_ID$ID)]
# Try Fruchterman-Reingold layout first, fallback to Kamada-Kaway if needed
layout_occurrence <- tryCatch(layout_with_fr(occurrence_graph),
error = function(e) layout_with_kk(occurrence_graph))
# Plot the occurrence network
plot(occurrence_graph, layout = layout_occurrence,
vertex.size = V(occurrence_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(occurrence_graph)$Count/2, edge.arrow.size = 0.5,
main = "Occurrence Network")
# For association network
association_graph <- graph_from_data_frame(co_occurrences, directed = FALSE)
V(association_graph)$count <- count_ID$Count[match(V(association_graph)$name, count_ID$ID)]
# Try Fruchterman-Reingold layout first, fallback to Kamada-Kaway if needed
layout_association <- tryCatch(layout_with_fr(association_graph),
error = function(e) layout_with_kk(association_graph))
# Plot the association network
plot(association_graph, layout = layout_association,
vertex.size = V(association_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(association_graph)$Count/2, edge.arrow.size = 0.5,
main = "Association Network")
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
# Count the number of unique locations, IDs, times, and dates.
num_unique_locations = identified_individuals %>%
distinct(Location) %>%
nrow()
num_unique_ids = identified_individuals %>%
distinct(ID) %>%
nrow()
num_unique_times = identified_individuals %>%
distinct(Time) %>%
nrow()
num_unique_dates = identified_individuals %>%
distinct(Date) %>%
nrow()
# Calculate how many times each ID occurs at each location along with
# matching dates and times.
count_ID = identified_individuals %>%
group_by(ID) %>%
summarise(Count = n()) %>%
ungroup()
# Count the occurrences per ID per location.
count_per_location_sorted = identified_individuals %>%
group_by(ID, Location) %>%
summarise(Count = n()) %>%
arrange(desc(ID))
# Create a new graph object.
graph = graph.empty(directed = FALSE)
# Add nodes to the graph using the unique locations.
unique_locations = identified_individuals %>%
distinct(Location)
graph = add_vertices(graph, num_unique_locations, name = unique_locations$Location)
# Add edges to the graph with weights corresponding to the number of occurrences per ID per location.
# We will use count_per_location_sorted for this purpose.
for (i in 1:(nrow(count_per_location_sorted) - 1)) {
id <- count_per_location_sorted$ID[i]
location <- count_per_location_sorted$Location[i]
count <- count_per_location_sorted$Count[i]
# Find the indices of the current location and the next location in the unique locations vector.
from_index <- which(unique_locations$Location == location)
to_index <- which(unique_locations$Location == count_per_location_sorted$Location[i + 1])
# Add an edge between the locations with the weight representing the number of occurrences.
if (!is.na(to_index)) {
graph <- add_edges(graph, c(from_index, to_index), weight = count, name = id)
}
}
# Plot the graph.
l = layout_with_gem(graph)
par(mar=c(1,1,1,1))
plot(graph,
vertex.label = V(graph)$name,
edge.label = "",
vertex.size = 9,
vertex.color="orange",
edge.color="#21918c")
dev.off()
# Create an occurrence graph
# For occurrence network
occurrence_graph <- graph_from_data_frame(count_per_location_sorted, directed = FALSE)
V(occurrence_graph)$count <- count_ID$Count[match(V(occurrence_graph)$name, count_ID$ID)]
# Try Fruchterman-Reingold layout first, fallback to Kamada-Kaway if needed
layout_occurrence <- tryCatch(layout_with_fr(occurrence_graph),
error = function(e) layout_with_kk(occurrence_graph))
# Plot the occurrence network
plot(occurrence_graph, layout = layout_occurrence,
vertex.size = V(occurrence_graph)$count * 5,
vertex.label.color = "black", vertex.label.cex = 0.7,
edge.width = E(occurrence_graph)$Count/2, edge.arrow.size = 0.5,
main = "Occurrence Network")
# 1) Network from interaction
library(igraph)
idat = read.csv("https://dshizuka.github.io/networkanalysis/SampleData/Sample_interactions.csv")
View(idat)
# generate a directed network
ig = graph_from_data_frame(idat, directed = T)
plot(ig)
# simplify the multiple interactions between same pairs by treating them as
# weighted edges
E(ig)$weight = 1 # make all edge weights = 1
ig2 = simplify(ig, remove.multiple = T, edge.attr.comb = list(weight = sum))
plot(ig2,
edge.width = E(ig2)$weight/4,
edge.curved = T,
layout = layout_in_circle(ig2))
#
library(igraph)
library(igraphdata)
library(asnipe)
library(dplyr)
library(magrittr)
library(viridisLite)
library(grDevices)
indiv = data("identified_individuals")
str(identified_individuals)
View(identified_individuals)
# generate a directed network
ig = graph_from_data_frame(identified_individuals, directed = T)
plot(ig)
# simplify the multiple interactions between same pairs by treating them as
# weighted edges
E(ig)$weight = 1 # make all edge weights = 1
ig2 = simplify(ig, remove.multiple = T, edge.attr.comb = list(weight = sum))
plot(ig2,
edge.width = E(ig2)$weight/4,
edge.curved = T,
layout = layout_in_circle(ig2))
assoc = as.matrix(read.csv("https://dshizuka.github.io/networkanalysis/SampleData/Sample_association.csv",
header = T, row.names = 1))
assoc
